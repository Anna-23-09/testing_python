ОБЪЕКТНО-ОРИЕНТИРОВАННОЕ ПРОГРАММИРОВАНИЕ

- это методология написания кода, где мы создаем объекты, которые хранят поля (свойства, атрибуты)
и методы

Поля, свойства, атрибуты - это обычные переменные
Метод - обычная функция
Те и другие используются для того, чтобы объекты взаимодействовали между собой,
хранили какие-либо значения в своих атрибутах и выполняли действия, используя свои собственные методы.

Класс - универсальный, комплексный тип данных,
состоящий из тематически единого набора "полей" и "методов",
т е он является моделью информационной сущности с внутренним и
внешним интерфейсами для оперирования своим содержимым.

Класс - это чертеж/прототип объекта, по которому создаются отдельные экземпляры (объекты,
которые похожи на прототип, но имеют доп функционал, который есть только у экземпляра).

Объект, созданный в результате вызова класса называется его ЭКЗЕМПЛЯРОМ

p1 = Person()
экземпляр = Класс()

Атрибуты класса или экземпляра
Переменная внутри класса называется атрибутом(свойство, поле).

class Person:
    max_up = 3

класс Person имеет атрибут max_up


Конструктор экземпляра

Магический метод __init__ срабатывает при каждом создании экземпляра

class Person:
    ...
    def __init__(self):
        ...



--- Параметр self и передача аргументов в экземпляр ---
 - Первый параметр функции всегда self - указатель экземпляру на самого себя
 - Параметры метода __init__ попадают в экземпляр при создании
 - Обращение к атрибутам экземпляра происходит через self.name


--- Методы класса ---

Функция внутри класса называется методом
 - instance.method()    - доступ к методу
 - instance.method(*args, **kwargs)     - метод может принимать аргументы, как и функция


 --- Инкапсуляция ---

 Модификаторы доступа:
 - public - публичный доступ, т е возможность обратиться к
 свойству или методу из любого другого класса и
 экземпляра
 - protected - защищенный доступ, позволяющий обращаться к свойствам
 и методам из класса и из классов наследников
 - private - приватный доступ, т е отсутствие возможности
 обратиться к свойству или методу из другого класса
 или экземпляра

 Символ "_" определяет уровень инкапсуляции
 - self._name - защищенный атрибут
 - def _method(self): - защищенный метод
 - self.__name - приватный атрибут
 - def __method(self): - приватный метод

 Внутренний механизм Python модифицирует приватные имена
 - было:
 class MyClass:
    ...
    self.__name

 - стало:
 z.MyClass()
 z._MyClass__name


 --- НАСЛЕДОВАНИЕ ---
 - один класс наследует атрибуты и методы другого класса

 Все классы Python наследуются от родительского класса
 - пишем так:
 class Person:
    pass

 - подразумеваем это:
 class Person(object):
    pass

Множественное наследование
Любой класс может иметь несколько родительских классов
Class Child(Parent1, Parent2, Parent3):
    ...


--- ПОЛИМОФРФИЗМ ---
- свойство системы, позволяющее использовать объекты
с одинаковым интерфейсом без информации о типе и
внутренней структуры объекта

