--- Создание экземпляра класса, __init__

Объект, созданный в результате вызова класса, называется его ЭКЗЕМПЛЯРОМ

def __init__(self, *args, **kwargs):
    self.param = args
    ...

Контроль создания класса через __new__

Метод __new__ срабатывает в момент создания
класса и может его изменить
- расширение неизменяемых классов
- шаблон Одиночка, Singleton
- другие модификации, метапрограммирование


--- Удаление экземпляра, метод __del__ ---
Команда __del__ не удаляет объект, а уменьшает счетчик ссылок на объект
Дандер метод del срабатывает при достижении счетчиком ссылок нуля.
Выполняет перед удалением объекта из памяти сборщиком мусора.


--- Документация ---

Наличие строк документации у классов, методов и функций - хороший тон

- help(instance) - справка на основе структуры класса включает документацию
- instance.__doc__ - обращение к документации напрямую



--- Представления экземпляра ---

__repr__
Строка должна создать новый экземпляр, если ее скопировать в код

class Person
    ...
        def __repr__(self):
            ...
            return f'Person({Self.param})'




--- Переопределение ---

Основные методы:
Левый объект вызывает свой метод и возвращает новый экземпляр класса

class Name:
    ...
    def __add__(self, other):
        ...
        return Name(param)

c = a + b


Right-методы
Левый объект не находит нужный метод, поэтому правый объект
вызывает свой метод и возвращает новый экземпляр класса

class Name:
    ...
    def __radd__(self, other):
        ...
        return Name(param)

c = a + b


In place методы:
Объект вызывает свой метод и изменяет свое значение:

class Name:
    ...
    def __iadd__(self, other):
        ...
        return self

a += b



--- Сравнение экземпляров класса --- (сравниваем именно id)

6 основных операций сравнения экземпляров:
- __eq__ - равно (=)
- __ne__ - не равно (!=)
- __gt__ - больше (>)
- __ge__ - не больше, меньше или равно (<=)
- __lt__ -  меньше (<)
- __le__ - не меньше, больше или равно (>=)


--- Обработка атрибутов ---

- Получение значения атрибута __getattribute__
Дандер __getattribute__ вызывается при любой попытке обращения к атрибутам экземпляра

class Name:
    ...
    def __getattribute__(self, item):
        ...
        return object.__getattribute__(self, item)

- Присвоение атрибуту значения __setattr__
Дандер __setattr__ срабатывает каждый раз, когда в коде есть операция присвоения

class Name:
    ...
    def __setattr__(self, key, value):
        ...
        return object,__setattr__(self, key, value)


- Обращение к несуществующему атрибуту __getattr__
Если свойство отсутствует, в первую очередь вызывается дандер __getattribute__.
В случае возврата им ошибки AttributeError, вызывается метод __getattr__

class Name:
    ...
    def __getattr__(self, iten):
        ...
        return ...


--- Удаление атрибута __delattr__
Дандер __delattr__ вызывается при попытке удалить атрибут командой del

class Name:
    ...
    def __delattr__(self, item):
        ...
        object.__delattr__(self, item)

