--- Исключения ---

Python имеет отличную систему информирования разработчика об ошибках


--- Команда try ---

Для перехвата ошибок создают блоки try

...
try:
    # отлавливаем ошибки
    ...
# продолжаем нормальную работу
...


--- Команда except ---

except - обязательный блок кода после try. Отвечает за обработку исключения

...
try:
    # отлавливаем ошибки
    ...
except NameError as e:
    # действия при перехвате ошибки NameError
    ...
# продолжаем нормальную работу
...


--- Команда else ---

Дополнительные действия модно указать в блоке else.
Блок else НЕ сработает, если внутри try произошло любое из событий:
- возбуждено исключение
- выполнена команда return
- выполнена команда break
- выполнена команда continue

--- Команда finally ---

Блок finally выполняется в любом случае

...
try:
    # отлавливаем ошибки
    ...
except NameError as e:
    # действия при перехвате ошибки NameError
    ...
finally:
    # выполняется в любом случае
    ...
# продолжаем нормальную работу
...


--- Иерархия исключений в Python ---

BaseException (базовые исключения)
    BaseExceptionGroup (базовые исключения для групп)
    GeneratorExit (когда генератор сообщает, что хочет завершить свою работу)
    KeyboardInterrupt (ctrl+C, при завершении программы)
    SystemExit (системный выход)
    Exception (исключения)

--- Ключевое слово raise ---

Код может самостоятельно поднимать любые исключения.
Команда raise позволяет программисту принудительно вызвать указанное исключение
- после raise необходимо указать класс исключения
- класс может принять поясняющий текст исключения в качестве аргумента



--- Создание собственных исключений ---

Разработчик может создавать свои классы исключения

- Исключение не должно дублировать стандартное исключение
- Собственные исключения наследуются от класса Exception
    Если исключений несколько, создают собственное родительское исключение
    от Exception. Остальные исключения наследуются от него
- Для исключения достаточно определить 2 дандер метода:
    - __init__
    - __str__
