--- Обзор стандартной библиотеки Python ---

- встроенные функции
- встроенные константы
- встроенные типы
- встроенные исключения
- услуги обработки текста
- службы двоичных данных
- типы данных
- числовые и математические модули
- модули функционального программирования
- доступ к файлам и каталогам
- сохранение данных
- сжатие данных и архивирование
- форматы файлов
- криптографические услуги
- общие службы ОС
- параллельное выполнение
- сеть и межпроцессное взаимодействие
- обработка данных в интернете
- инструменты обработки структурированной разметки
- интернет-протоколы и поддержка
- мультимедийные услуги
- интернационализация
- программные фреймворки
- графические пользовательские интерфейсы с Tk
- инструменты разработки
- отладка и профилирование
- упаковка и распространение ПО
- службы выполнения Python
- пользовательские интерпретаторы Python
- импорт модулей
- языковые службы Python
- специальные службы MS Windows
- специальные службы Unix
- замененные (устаревшие) модули


--- Модуль logging ---
отвечает за логирование(журналирование), позволяет записывать различные события,
которые происходят в коде, или выводить их на экран, или сохранять их в файле


--- Модуль datetime ---
(без учета временных поясов)

Дата, время, дата-время, разница во времени

Свойства и методы для работы с datetime:
Вывод по формату:
- dt.timestamp()
- dt.isoformat()
- dt.strftime(FORMAT)
Получение из текстового формата:
- datetime.fromtimestamp(text)
- datetime.fromisoformat(number)
- datetime.strptime(text, FORMAT)


--- Фабричная функция namedtuple из модуля collections
namedtuple принимает пару обязательных значений:
1) имя класса. Это строка, содержащая точно такое же имя как и переменная
слева от знака равно
2) Список строк или строка с пробелами в качестве разделителей. Имена из
списка превращаются в свойства класса



--- Модуль array ---

- 'b' - целое со знаком, 1 байт
- 'B' - целое без знака, 1 байт
- 'u' - Юникод-символ в 2 или 4 байта
- 'h' - целое со знаком, 2 байта
- 'H' - целое без знака, 2 байта
...


--- Модуль argparse ---
 Ключ --help или -h добавляется по умолчанию

 import argparse

 parser = argparse.ArgumentParser(description='My first
 argument parser')

 parser.add_argument('numbers', metavar='N', type=float,
 nargs='*', help='press some numbers')

 args = parser.parse_args()


 Создаем парсер, ArgumentParser
 Большинство настроек отлично работают со значениями по умолчанию

 - prog - заменяет название файла в первой строке
 справки на переданное имя
 - description - описание в начале справки
 - epilog - описание в конце справки


Выгружаем результаты, parse_args
parse_args принимает 2 аргумента

Строка для анализа: значение по умолчанию sws.args
Объект для сохранения результата: значение по умолчанию класс Namespace


Добавляем аргументы, add_argument
- metavar - имя, которое выводится в справке
- type - тип для преобразования аргумента
- nargs - указывает на кол-во значений, которые надо собрать из командной
строки и собрать результаты в список list
- help - выводит подсказки об аргументе
- action - принимает одно из строковых значений и срабатывает при наличии в
строке вызова скрипта соответствующего параметра
    - store_const - передает в args ключ со значением из параметра const
    - store_true или store_false - сохраняет в ключе истину или ложь
    - append - ищет несколько появлений ключа и собирает все значения после
    него в список
    - append_const - добавляет значение из ключа в список, если ключ вызван

